
import { Repository, getCustomRepository, getRepository } from "typeorm";
import { User } from "../entities/user.entity";
const jwt = require('jsonwebtoken');
export class UserRepository extends Repository<User> {}
export const createUser = async (userData: any) => {
     try {
          const newUser = User.create(userData); // Create a new user entity
          const savedUser = await newUser.save(); // Save the new user to the database
          const { id, fullName, phone, cnic, email } = savedUser;

          return {
               status: true,
               message: "User created Successfully",
               data: {
                    id, // Return the UUID generated by TypeORM
                    fullName,
                    phone,
                    cnic,
                    email,
               },
          };
     } catch (error: any) {
          return { status: false, message: error.message };
     }
};
export const authUser = async (userData: any) => {
     try {
          const token = jwt.sign({ password: userData.password, email: userData.email },'this is key' , {expiresIn:3600});
          const { email, password  } = userData;
          const data:any = await User.findOne({  where: { email: email, password: password } })
          if(data){
               data['authToken'] = token
               delete data.password
               return {
                    status: true,
                    message: "User login Successfully",
                    data: data,
               };
          }else{
               return {
                    status: false,
                    message: "Invalid email or password",
               };
          }
         
     } catch (error: any) {
          return { status: false, message: error.message };
     }
};

export const getUserById = async (Id: any) => {
     try {
          
          const data:any = await User.findOne({  where: { id: Id } })
          if(data){ 
               return {
                    status: true,
                    message: "Your Profile Data",
                    data: [data],
               };
          }else{
               return {
                    status: false,
                    message: "User not Exist with this Id!",
               };
          }
         
     } catch (error: any) {
          return { status: false, message: error.message };
     }
};
export const getUser = async () => {
     try {
          const userList = await User.find(); // Get users list 
          return { status: true, message: "Users list", data: userList, };
     } catch (error: any) {
          return { status: false, message: error.message, };
     }
}

export const removeUser = async (Id: any) => {
     try {

          console.log(Id, "Id")
          const userList: any = await User.delete({ id: Id }); // Create a new user entity
          if (userList.affected === 1) {
               return { status: true, message: "User deleted successfully", data: userList, };
          }
          if (userList.affected === 0) {
               return { status: true, message: "User deleted successfully", data: userList, };
          }
     } catch (error: any) {
          return { status: false, message: error.message, };

     }
}

export const updateUser = async (id: any, body: Object) => {
     try {
          const userExist: any = await User.findOne({  where: { id: id } });
          if(userExist){
               const userList: any = await User.update(id, body); // Create a new user entity
               if (userList.affected === 1) {
                    const user: any = await User.findOne({  where: { id: id } });
                    return { status: true, message: "User updated successfully", data :user};
               }
               if (userList.affected === 0) {
                    const user: any = await User.findOne({  where: { id: id } });
                    return { status: true, message: "User updated successfully", data :user};
               }
          }else{
               return { status: true, message: "User not exist with this Id", };
   
          }
          
     } catch (error: any) {
          return { status: false, message: error.message, };

     }
}

// export const getMyAccounts = async (id: any) => {
     
//      try {
//           const userId = id;
      
//           // Use getRepository directly
//           const userRepository = getRepository(User);
      
//           // Alternatively, use getCustomRepository with the updated syntax
//           const userRepositoryCustom = getCustomRepository(UserRepository);
      
//           // Use the repository to perform the findOne operation
//           const data: any | undefined = await userRepository.findOne(userId, { relations: ['account'] });
      
//           if (data) {
//             // The user was found, and data is not undefined
//             return { status: true, data };
//           } else {
//             // No user found with the specified userId
//             return { status: false, message: 'User not found' };
//           }
//         } catch (error: any) {
//           // Handle other errors
//           return { status: false, message: error.message };
//         }
//    };